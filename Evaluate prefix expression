//Steps
//1. Define doubly linked list
//2. Design Stack
//3. Push and pop operation to evaluate prefix expression string

//Define double linked list
//Node definition
public class DoubleNode {
double data;
DoubleNode prev;
DoubleNode next;

DoubleNode(double n){
	this.data =n;
}
}


//Design Stack
public class DLL {
private DoubleNode head;
private DoubleNode tail;
int length;

public void PushStack(DoubleNode x){
	if (head == null & tail == null){
		head = x;
		tail =x;
		this.length=1;
		}
	else{
		tail.next=x;
		x.prev=tail;
		tail=tail.next;
		this.length++;
	}
}

public void PeekStack(){
	System.out.println("Top of the stack is: "+this.tail.data);
}

public double PopStack(){
	if(this.tail==this.head && this.length==1){
		double temp=tail.data;
		this.length=0;
		this.head=null;
		this.tail=null;
		return temp;
	}
	else if(this.tail==null && this.head==null){
		System.out.println("Empty stack");
		return 0;
	}
	else{
	double temp = this.tail.data;
	this.tail.prev.next=null;
	this.tail=this.tail.prev;
	this.length--;
	return temp;
	}
}
}



//Evaluate string of expression (single digit operands only) in prefix form

public class evaluate {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
String statement= "+ 3 + * 2 8 9";
String expression[] = statement.split(" ");
DLL EvaluationStack = new DLL();
int i=expression.length-1;
while(i>=0){
    if(CheckOperator(expression[i].charAt(0))){
        double operand1 = EvaluationStack.PopStack();
        double operand2 = EvaluationStack.PopStack();
        double result = Evaluate(expression[i].charAt(0),operand1,operand2);
        EvaluationStack.PushStack(new DoubleNode(result));
    }
    else{
        EvaluationStack.PushStack(new DoubleNode(Double.parseDouble(expression[i])));
    }
    i--;
}
System.out.println("Result is: "+EvaluationStack.PopStack());
	}

//method to check whether the string is an operand or an operator
        static boolean CheckOperator(char a){
	int AsciiEq = (int) a;
	if (AsciiEq == 37 || AsciiEq == 42 || AsciiEq == 43 || AsciiEq == 45 || AsciiEq ==47){
		return true;
	}
	else return false;
}

    private static double Evaluate(char charAt, double operand1, double operand2) {
        char operator = charAt;
        switch(operator){
            case '+':
                return (operand1+operand2);
            case '*':
                return (operand1*operand2);
            case '-':
                return(operand1-operand2);
            case '%':
                return (operand1%operand2);
            case '/':
                return(operand1/operand2);
            default:
                return 0.0;
        }
    }
}
