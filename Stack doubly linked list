//Node definition
public class DoubleNode {
int data;
DoubleNode prev;
DoubleNode next;

DoubleNode(int n){
	this.data =n;
}
}


//Define a stack and Push, Pop, and Peek methods

public class DLL {
private DoubleNode head;
private DoubleNode tail;
int length;

public void PushStack(DoubleNode x){
	if (head == null & tail == null){
		head = x;
		tail =x;
		this.length=1;
		}
	else{
		tail.next=x;
		x.prev=tail;
		tail=tail.next;
		this.length++;
	}
}

public void PeekStack(){
	System.out.println("Top of the stack is: "+this.tail.data);
}

public int PopStack(){
	if(this.tail==this.head && this.length==1){
		int temp=tail.data;
		this.length=0;
		this.head=null;
		this.tail=null;
		return temp;
	}
	else if(this.tail==null && this.head==null){
		System.out.println("Empty stack");
		return 0;
	}
	else{
	int temp = this.tail.data;
	this.tail.prev.next=null;
	this.tail=this.tail.prev;
	this.length--;
	return temp;
	}
}
}


//Execute stack and demonstrate the methods


public class ExecutionControl {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		DLL MyStack = new DLL();
		MyStack.PushStack(new DoubleNode(99));
		MyStack.PushStack(new DoubleNode(199));
		MyStack.PushStack(new DoubleNode(299));
		MyStack.PushStack(new DoubleNode(399));
		MyStack.PushStack(new DoubleNode(499));
		MyStack.PushStack(new DoubleNode(599));
		MyStack.PushStack(new DoubleNode(900));
		MyStack.PeekStack();
		System.out.println("Stack length= "+MyStack.length);
		int val=MyStack.PopStack();
		System.out.println("Pop value: "+val);
		val=MyStack.PopStack();
		System.out.println("Pop value: "+val);
		val=MyStack.PopStack();
		System.out.println("Pop value: "+val);
		val=MyStack.PopStack();
		System.out.println("Pop value: "+val);
		System.out.println("Stack length= "+MyStack.length);
		MyStack.PeekStack();
	}

}
